### **SonarQube for DevOps Engineers**  
SonarQube is an **open-source code quality and security analysis tool** used in DevOps pipelines to identify **bugs, vulnerabilities, and code smells**. It supports multiple languages and integrates with tools like **Jenkins, GitHub, GitLab, Bitbucket, and Maven**.

---

## **1. SonarQube Installation**  

### **ðŸ“Œ Install SonarQube on Linux**  
```sh
# Install Java (SonarQube requires Java 11+)
sudo apt update
sudo apt install openjdk-11-jdk -y

# Add SonarQube user
sudo useradd -m -d /opt/sonarqube -s /bin/bash sonar

# Download and extract SonarQube
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.3.zip
sudo unzip sonarqube-9.9.3.zip -d /opt/
sudo mv /opt/sonarqube-9.9.3 /opt/sonarqube
sudo chown -R sonar:sonar /opt/sonarqube

# Start SonarQube
sudo su - sonar
cd /opt/sonarqube/bin/linux-x86-64
./sonar.sh start
```

### **ðŸ“Œ Start & Enable SonarQube as a Service**
```sh
sudo systemctl enable sonarqube
sudo systemctl start sonarqube
sudo systemctl status sonarqube
```

### **ðŸ“Œ Access SonarQube**
- Open browser: `http://localhost:9000`
- Default login:
  - **Username:** `admin`
  - **Password:** `admin`

---

## **2. SonarQube Essential Commands for DevOps Engineers**  

### **ðŸ”¹ Managing SonarQube Service**
```sh
sudo systemctl start sonarqube    # Start SonarQube
sudo systemctl stop sonarqube     # Stop SonarQube
sudo systemctl restart sonarqube  # Restart SonarQube
sudo systemctl status sonarqube   # Check SonarQube status
```

### **ðŸ”¹ Running SonarQube Scanner (Maven Project)**
```sh
mvn clean verify sonar:sonar \
  -Dsonar.projectKey=myproject \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=admin \
  -Dsonar.password=admin
```

### **ðŸ”¹ Running SonarQube Scanner (Gradle Project)**
```sh
./gradlew sonarqube \
  -Dsonar.projectKey=myproject \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=admin
```

### **ðŸ”¹ Running SonarQube Scanner (JavaScript/Other Languages)**
```sh
sonar-scanner \
  -Dsonar.projectKey=myproject \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://localhost:9000 \
  -Dsonar.login=admin
```

### **ðŸ”¹ Checking SonarQube Logs**
```sh
tail -f /opt/sonarqube/logs/sonar.log
```

---

## **3. SonarQube Integration with Jenkins**  

### **ðŸ“Œ Install SonarQube Plugin in Jenkins**
1. Go to **Jenkins Dashboard** â†’ **Manage Jenkins** â†’ **Manage Plugins**.
2. Install **SonarQube Scanner** plugin.
3. Configure **SonarQube server** in **Manage Jenkins â†’ Configure System**.

### **ðŸ“Œ Add SonarQube Scanner in Jenkins Pipeline**
```groovy
pipeline {
    agent any
    stages {
        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn clean verify sonar:sonar'
                    }
                }
            }
        }
    }
}
```

---

## **4. SonarQube API Commands**  

### **ðŸ“Œ Get Project List**
```sh
curl -u admin:admin "http://localhost:9000/api/projects/search"
```

### **ðŸ“Œ Get Project Analysis Status**
```sh
curl -u admin:admin "http://localhost:9000/api/qualitygates/project_status?projectKey=myproject"
```

### **ðŸ“Œ Create a New SonarQube Project**
```sh
curl -u admin:admin -X POST "http://localhost:9000/api/projects/create" \
     -d "name=MyProject&project=MyProject"
```

### **ðŸ“Œ Create a New Quality Gate**
```sh
curl -u admin:admin -X POST "http://localhost:9000/api/qualitygates/create" \
     -d "name=MyQualityGate"
```

### **ðŸ“Œ Assign a Quality Gate to a Project**
```sh
curl -u admin:admin -X POST "http://localhost:9000/api/qualitygates/select" \
     -d "projectKey=myproject&gateId=1"
```

---

## **5. SonarQube Best Practices for DevOps**  

âœ” **Use Quality Gates to block bad code**  
âœ” **Integrate SonarQube with CI/CD pipelines**  
âœ” **Enable Static Code Analysis in Jenkins**  
âœ” **Configure SonarQube to detect Security Vulnerabilities**  
âœ” **Monitor technical debt using SonarQube dashboards**  
âœ” **Automate reporting using SonarQube API**  

---

## **6. Summary**  
âœ… **Installation** â€“ SonarQube setup & service management  
âœ… **Essential Commands** â€“ Running scans, checking logs, API calls  
âœ… **CI/CD Integration** â€“ Jenkins pipeline setup  
âœ… **Security & Quality** â€“ Using Quality Gates and Metrics  

Would you like help **configuring SonarQube for GitHub, GitLab, or AWS?** ðŸš€