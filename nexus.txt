nexus

### **Nexus for DevOps Engineers**  
Nexus Repository Manager is an artifact management tool used to **store, manage, and distribute build artifacts**. It acts as a **private repository** for Maven, npm, Docker, Python, and other package formats, helping DevOps engineers manage dependencies efficiently.

---

## **Key Nexus Concepts**  
- **Repositories**:  
  - **Proxy Repository** â€“ Caches external dependencies (e.g., Maven Central).  
  - **Hosted Repository** â€“ Stores internally developed artifacts.  
  - **Group Repository** â€“ Combines multiple repositories into one endpoint.  
- **Artifacts**: Compiled binaries such as JARs, WARs, Docker images, etc.  
- **Users & Roles**: Access control for securing repositories.  
- **Blob Stores**: Storage locations for artifacts.  

---

## **Essential Nexus Commands for DevOps Engineers**  

### **1. Installation & Service Management**  
- `sudo systemctl start nexus` â€“ Start Nexus service  
- `sudo systemctl stop nexus` â€“ Stop Nexus service  
- `sudo systemctl restart nexus` â€“ Restart Nexus service  
- `sudo systemctl status nexus` â€“ Check Nexus service status  
- `tail -f /opt/nexus/sonatype-work/nexus3/log/nexus.log` â€“ Monitor logs  

---

### **2. Managing Repositories via API (REST Calls)**  
#### **List All Repositories**
```bash
curl -u admin:<password> -X GET "http://localhost:8081/service/rest/v1/repositories"
```

#### **Create a Hosted Repository (Maven)**
```bash
curl -u admin:<password> -X POST "http://localhost:8081/service/rest/v1/repositories/maven/hosted" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "maven-releases",
    "online": true,
    "storage": { "blobStoreName": "default", "strictContentTypeValidation": true, "writePolicy": "ALLOW" }
  }'
```

#### **Delete a Repository**
```bash
curl -u admin:<password> -X DELETE "http://localhost:8081/service/rest/v1/repositories/maven-releases"
```

---

### **3. Uploading Artifacts to Nexus (Maven, Docker, etc.)**  
#### **Using Maven to Upload Artifacts**  
- Add Nexus to `settings.xml`:  
```xml
<servers>
  <server>
    <id>nexus-repo</id>
    <username>admin</username>
    <password>yourpassword</password>
  </server>
</servers>
```
- Deploy an artifact:  
```bash
mvn deploy -DrepositoryId=nexus-repo -Durl=http://localhost:8081/repository/maven-releases/
```

#### **Using cURL to Upload an Artifact**  
```bash
curl -u admin:<password> --upload-file myapp.jar "http://localhost:8081/repository/maven-releases/com/mycompany/myapp/1.0/myapp-1.0.jar"
```

---

### **4. Managing Users & Roles**  
#### **List Users**  
```bash
curl -u admin:<password> -X GET "http://localhost:8081/service/rest/v1/security/users"
```

#### **Create a User**  
```bash
curl -u admin:<password> -X POST "http://localhost:8081/service/rest/v1/security/users" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "devops_user",
    "firstName": "DevOps",
    "lastName": "Engineer",
    "emailAddress": "devops@example.com",
    "password": "password123",
    "status": "active",
    "roles": ["nx-admin"]
  }'
```

#### **Delete a User**  
```bash
curl -u admin:<password> -X DELETE "http://localhost:8081/service/rest/v1/security/users/devops_user"
```

---

### **5. Docker Integration with Nexus**  
#### **Configure Nexus as a Private Docker Registry**  
- **Login to Nexus Docker Repository**  
```bash
docker login -u admin -p <password> http://localhost:8082
```
- **Tag and Push an Image**  
```bash
docker tag myapp:v1 localhost:8082/myapp:v1
docker push localhost:8082/myapp:v1
```
- **Pull an Image**  
```bash
docker pull localhost:8082/myapp:v1
```

---

### **6. Cleanup & Maintenance**  
#### **List Unused Artifacts**  
```bash
curl -u admin:<password> -X GET "http://localhost:8081/service/rest/v1/search/assets?q=unused"
```

#### **Delete Old Snapshots**  
```bash
curl -u admin:<password> -X DELETE "http://localhost:8081/service/rest/v1/repositories/maven-snapshots"
```

---

## **Best Practices for Nexus in DevOps**  
âœ” Use **role-based access control (RBAC)** to secure repositories.  
âœ” Enable **HTTPS** to encrypt communication.  
âœ” Configure **repository cleanup policies** to remove old snapshots.  
âœ” Automate artifact uploads with **Maven, Gradle, Docker, and API scripts**.  
âœ” Monitor logs (`nexus.log`) for troubleshooting and performance tuning.  

These commands will help you **efficiently manage Nexus repositories** in your DevOps workflow. Let me know if you need deeper insights into **CI/CD pipeline integration** with Nexus! ðŸš€