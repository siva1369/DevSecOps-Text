### **Trivy for DevOps Engineers**  
**Trivy** is an open-source security scanner developed by **Aqua Security**. It is widely used in **DevOps pipelines** to scan **container images, filesystems, Git repositories, Kubernetes clusters, and cloud resources** for **vulnerabilities, misconfigurations, and secrets**.

---

## **1. Installing Trivy**  

### **ðŸ“Œ Install on Linux**  
```sh
sudo apt install wget -y
wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux_amd64.tar.gz
tar -xvf trivy_Linux_amd64.tar.gz
sudo mv trivy /usr/local/bin/
```

### **ðŸ“Œ Install on MacOS (Homebrew)**  
```sh
brew install aquasecurity/trivy/trivy
```

### **ðŸ“Œ Install on Windows**  
1. Download from [GitHub Releases](https://github.com/aquasecurity/trivy/releases).  
2. Extract and add `trivy.exe` to the system `PATH`.  

---

## **2. Scanning with Trivy**  

### **ðŸ”¹ Scan a Docker Image**  
```sh
trivy image nginx:latest
```

### **ðŸ”¹ Scan a Local Container Image**  
```sh
trivy image --input /path/to/image.tar
```

### **ðŸ”¹ Scan a Filesystem for Vulnerabilities**  
```sh
trivy fs /path/to/project
```

### **ðŸ”¹ Scan a Git Repository**  
```sh
trivy repo https://github.com/example/repo.git
```

### **ðŸ”¹ Scan a Kubernetes Cluster**  
```sh
trivy k8s cluster
```

### **ðŸ”¹ Scan a Kubernetes Namespace**  
```sh
trivy k8s --namespace my-namespace
```

### **ðŸ”¹ Scan an AWS Account**  
```sh
trivy aws --region us-east-1
```

---

## **3. Trivy Scan Output Formats**  

### **ðŸ”¹ Generate JSON Report**  
```sh
trivy image --format json -o report.json nginx:latest
```

### **ðŸ”¹ Generate CSV Report**  
```sh
trivy image --format template --template "@templates/csv.tpl" -o report.csv nginx:latest
```

### **ðŸ”¹ Generate an HTML Report**  
```sh
trivy image --format template --template "@templates/html.tpl" -o report.html nginx:latest
```

---

## **4. Integrating Trivy in CI/CD Pipelines**  

### **ðŸ“Œ Integration in Jenkins Pipeline**
```groovy
pipeline {
    agent any
    stages {
        stage('Trivy Scan') {
            steps {
                sh 'trivy image --exit-code 1 nginx:latest'
            }
        }
    }
}
```

### **ðŸ“Œ Integration in GitHub Actions**
```yaml
jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Install Trivy
        run: |
          sudo apt install wget -y
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux_amd64.tar.gz
          tar -xvf trivy_Linux_amd64.tar.gz
          sudo mv trivy /usr/local/bin/
      
      - name: Scan Image
        run: trivy image nginx:latest
```

---

## **5. Trivy Configuration & Database Updates**  

### **ðŸ”¹ Update the Vulnerability Database**  
```sh
trivy --update
```

### **ðŸ”¹ Configure Trivy to Ignore Low/Medium Vulnerabilities**  
```sh
trivy image --severity HIGH,CRITICAL nginx:latest
```

### **ðŸ”¹ Suppress False Positives with Ignore File**  
1. Create `.trivyignore`  
```sh
CVE-2024-1234
CVE-2024-5678
```
2. Run Trivy with ignore file  
```sh
trivy image --ignorefile .trivyignore nginx:latest
```

---

## **6. Best Practices for DevOps**  

âœ” **Automate Trivy scans in CI/CD pipelines**  
âœ” **Integrate Trivy with Kubernetes and Docker security workflows**  
âœ” **Monitor cloud security with Trivy AWS/GCP/Azure scanning**  
âœ” **Regularly update the vulnerability database**  
âœ” **Use Trivy ignore files to filter false positives**  

---

## **7. Summary**  
âœ… **Installation** â€“ Linux, MacOS, Windows  
âœ… **Essential Commands** â€“ Scanning images, filesystems, Git, Kubernetes, and cloud  
âœ… **CI/CD Integration** â€“ Jenkins, GitHub Actions  
âœ… **Security Best Practices** â€“ Automate, monitor, and update Trivy scans  

Would you like help **integrating Trivy with SonarQube or Kubernetes?** ðŸš€